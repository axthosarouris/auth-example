AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Some Description
Parameters:
  # Parameters from Cognito
  AuthenticationDomainPrefix:
    Type: String
    Default: orestis-auth
    Description: The prefix for the Cognito domain that hosts the sign-up and sign-in pages for your application.
  BackendAuthenticationScope:
    Type: String
    Default: https://www.example.org/


Globals:
  Function:
    MemorySize: 1769
    Timeout: 60
    Runtime: java11

  Api:
    Cors:
      AllowMethods: '''POST, PUT, GET,OPTIONS'''
      AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      AllowOrigin: '''*'''

Resources:

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess # Policy for allowing tracing in Xray
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*"

  SomeApi:
    Type: AWS::Serverless::Api
    DependsOn: UserPool
    Properties:
      StageName: Prod
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            AuthorizationScopes:
              - !Sub "${BackendAuthenticationScope}/backend"
            UserPoolArn: !GetAtt UserPool.Arn
            Identity:
              Header: Authorization
              ReauthorizeEvery: 10
      EndpointConfiguration: REGIONAL



  CreateUserHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.HelloHandler::handleRequest
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /hello
            Method: get
            RestApiId: !Ref SomeApi


  DefaultLambdaPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub DefaultLambdaPermissions-${AWS::StackName}
      Roles:
        - !Ref LambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - lambda:InvokeFunction
            Resource: "*"


  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      MfaConfiguration: "OFF"
      UsernameConfiguration:
        CaseSensitive: true
      UserPoolName: orestis-pool


  ResourceServerScopes:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: !Ref BackendAuthenticationScope
      Name: Scopes for backend
      Scopes:
        - ScopeDescription: Necessary scope for backend authentication to work
          ScopeName: backend
      UserPoolId: !Ref UserPool

  BackendApplicationClient:
    DependsOn: ResourceServerScopes
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      AllowedOAuthFlows:
        - client_credentials
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - !Sub "${BackendAuthenticationScope}/backend"
      ClientName: BackendApplicationClient
      CallbackURLs:
        - http://localhost:3000
      DefaultRedirectURI: http://localhost:3000
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: true
      IdTokenValidity: 15
      AccessTokenValidity: 15
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes


  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Ref AuthenticationDomainPrefix

